---
- hosts: local
  become: yes

  vars:
    dev_packages:
      - git
      - zsh
      - tree
      - curl
      - wget
      - nano
      - ca-certificates
      - gnupg
    git_config:
      username: "{{ lookup('env', 'GIT_USERNAME') | default('default_username', true) }}"
      email: "{{ lookup('env', 'GIT_EMAIL') | default('default_email@example.com', true) }}"
    omzsh_paths:
      install_script: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
      home_dir: "{{ ansible_env.HOME }}/.oh-my-zsh"
    zsh_plugins:
      - zsh-syntax-highlighting
    zsh_theme: "powerlevel10k/powerlevel10k"

  tasks:
    - name: Install essential development packages
      apt:
        name: "{{ dev_packages }}"
        state: present
        update_cache: yes

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Check if Docker GPG Key exists
      stat:
        path: /etc/apt/keyrings/docker.asc
      register: docker_gpg

    - name: Download Docker GPG Key if not present
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: not docker_gpg.stat.exists

    - name: Dearmor Docker GPG Key if not already done
      command:
        cmd: gpg --dearmor --output /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
        creates: /etc/apt/keyrings/docker.gpg

    - name: Check if Docker repository exists
      shell: grep -qxF "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" /etc/apt/sources.list.d/docker.list
      register: docker_repo_check
      changed_when: false
      failed_when: false

    - name: Add Docker repository if missing
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
      when: docker_repo_check.rc != 0

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Ensure user is in Docker group
      user:
        name: "{{ ansible_env.USER }}"
        groups: docker
        append: yes
      when: ansible_env.USER not in lookup('file', '/etc/group')

    - name: Ensure Docker service is enabled and started
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Configure Git global settings
      git_config:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { key: user.name, value: "{{ git_config.username }}" }
        - { key: user.email, value: "{{ git_config.email }}" }

    - name: Ensure Zsh is installed and configured
      block:
        - name: Verify Zsh executable
          command:
            cmd: which zsh
          register: zsh_path
          changed_when: false
          failed_when: false

        - name: Install Oh My Zsh if not installed
          shell: >
            sh -c "$(curl -fsSL {{ omzsh_paths.install_script }})" || true
          args:
            creates: "{{ omzsh_paths.home_dir }}"
          environment:
            ZSH: "{{ omzsh_paths.home_dir }}"
            RUNZSH: "no"
          when: zsh_path.rc == 0

    - name: Ensure Zsh Plugins and Theme are configured
      block:
        - name: Clone Powerlevel10k Theme if not present
          git:
            repo: 'https://github.com/romkatv/powerlevel10k.git'
            dest: "{{ omzsh_paths.home_dir }}/custom/themes/powerlevel10k"
            depth: 1
            update: no

        - name: Clone Syntax Highlighting Plugin if not present
          git:
            repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
            dest: "{{ omzsh_paths.home_dir }}/custom/plugins/zsh-syntax-highlighting"
            version: master
            update: no

        - name: Ensure .zshrc Configuration is set
          lineinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            create: yes
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter | default(omit) }}"
          loop:
            - { regexp: '^ZSH_THEME=', line: 'ZSH_THEME="{{ zsh_theme }}"' }
            - { regexp: '^plugins=', line: 'plugins=({{ zsh_plugins | join(" ") }})' }

    - name: Ensure Zsh is set as Default Shell
      user:
        name: "{{ ansible_env.USER }}"
        shell: "{{ zsh_path.stdout }}"
      when: zsh_path.rc == 0

    - name: Create .hushlogin File
      file:
        path: "{{ ansible_env.HOME }}/.hushlogin"
        state: touch
      register: hushlogin_file

    - name: Configure Powerlevel10k if not already set
      block:
        - name: Copy .p10k.zsh Configuration if not present
          copy:
            src: assets/zsh/.p10k.zsh
            dest: "{{ ansible_env.HOME }}/.p10k.zsh"
          args:
            force: no

        - name: Ensure P10K Configuration is sourced in .zshrc
          lineinfile:
            path: "{{ ansible_env.HOME }}/.zshrc"
            line: '[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh'
            state: present
